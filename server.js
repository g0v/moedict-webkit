// Generated by LiveScript 1.6.0
(function(){
  var livescript, fs, LTMRegexes, indexBody, React, ref$, Result, decodeLangPart, XREF, i$, len$, trim, defOf, HASHOF, wt2font, font2name, fontOf, iconv, fixMojibake, replace$ = ''.replace, split$ = ''.split;
  livescript = require('livescript');
  fs = require('fs');
  require("babel/register")({
    stage: 0
  });
  LTMRegexes = {};
  indexBody = fs.readFileSync('index.html');
  indexBody = replace$.call(indexBody, /^[\s\S]*<\/head>/, '');
  indexBody = replace$.call(indexBody, /<\/html>/, '');
  indexBody = replace$.call(indexBody, /<noscript>[\s\S]*<\/noscript>/g, '');
  indexBody = replace$.call(indexBody, /<script\b[^>]*data-cfasync="true"[^>]*><\/script>/g, '');
  indexBody = indexBody.replace(/\s*<center\b[\s\S]*<\/center>\s*/, '<!-- RESULT -->');
  React = require('react');
  ref$ = require('./view.ls'), Result = ref$.Result, decodeLangPart = ref$.decodeLangPart;
  XREF = {};
  for (i$ = 0, len$ = (ref$ = ['a', 't', 'h', 'c']).length; i$ < len$; ++i$) {
    (fn$.call(this, ref$[i$]));
  }
  function xrefOf(id, srcLang){
    var rv, tgtLang, ref$, words, res$, i$, ref1$, len$, x;
    rv = {};
    for (tgtLang in ref$ = XREF[srcLang]) {
      words = ref$[tgtLang];
      if (words[id] != null) {
        res$ = [];
        for (i$ = 0, len$ = (ref1$ = split$.call(words[id], /,+/)).length; i$ < len$; ++i$) {
          x = ref1$[i$];
          res$.push(x || id);
        }
        rv[tgtLang] = res$;
      }
    }
    return rv;
  }
  trim = function(it){
    return (it != null ? it : '').replace(/[`~]/g, '');
  };
  defOf = function(lang, title, cb){
    return fs.readFile(lang + "/" + title + ".json", function(err, json){
      var payload, def, i$, ref$, len$, d, j$, len1$, ref1$, f, l;
      payload = (function(){
        try {
          if (!err) {
            return JSON.parse(json);
          }
        } catch (e$) {}
      }());
      def = '';
      for (i$ = 0, len$ = (ref$ = (payload != null ? payload.h : void 8) || []).length; i$ < len$; ++i$) {
        d = ref$[i$].d;
        for (j$ = 0, len1$ = d.length; j$ < len1$; ++j$) {
          ref1$ = d[j$], f = ref1$.f, l = ref1$.l;
          def += f || l;
        }
      }
      return cb(trim(def));
    });
  };
  HASHOF = {
    a: '#',
    t: '#\'',
    h: '#:',
    c: '#~'
  };
  wt2font = {
    wt071: 'HanWangShinSuMedium',
    wt024: 'HanWangFangSongMedium',
    wt021: 'HanWangLiSuMedium',
    wt001: 'HanWangMingLight',
    wt002: 'HanWangMingMedium',
    wt003: 'HanWangMingBold',
    wt005: 'HanWangMingBlack',
    wt004: 'HanWangMingHeavy',
    wt006: 'HanWangYenLight',
    wt009: 'HanWangYenHeavy',
    wt011: 'HanWangHeiLight',
    wt014: 'HanWangHeiHeavy',
    wt064: 'HanWangYanKai',
    wt028: 'HanWangKanDaYan',
    wt034: 'HanWangKanTan',
    wt040: 'HanWangZonYi',
    wtcc02: 'HanWangCC02',
    wtcc15: 'HanWangCC15',
    wthc06: 'HanWangGB06'
  };
  font2name = {
    HanWangMingMedium: '中明體',
    HanWangYenHeavy: '特圓體',
    HanWangYenLight: '細圓體',
    HanWangShinSuMedium: '中行書',
    HanWangGB06: '鋼筆行楷',
    HanWangHeiHeavy: '特黑體',
    HanWangMingLight: '細明體',
    HanWangHeiLight: '細黑體',
    HanWangFangSongMedium: '中仿宋',
    HanWangMingBold: '粗明體',
    HanWangMingBlack: '超明體',
    HanWangYanKai: '顏楷體',
    HanWangMingHeavy: '特明體',
    HanWangCC02: '酷儷海報',
    HanWangLiSuMedium: '中隸書',
    HanWangKanDaYan: '空疊圓',
    HanWangKanTan: '勘亭流',
    HanWangCC15: '酷正海報',
    HanWangZonYi: '綜藝體',
    ShuoWen: '說文標篆'
  };
  fontOf = function(it){
    if (/sung/i.exec(it)) {
      return 'TW-Sung';
    }
    if (/ebas/i.exec(it)) {
      return 'EBAS';
    }
    if (/shuowen/i.exec(it)) {
      return 'ShuoWen';
    }
    if (/cwming/i.exec(it)) {
      return 'cwTeXQMing';
    }
    if (/cwhei/i.exec(it)) {
      return 'cwTeXQHei';
    }
    if (/cwyuan/i.exec(it)) {
      return 'cwTeXQYuan';
    }
    if (/cwkai/i.exec(it)) {
      return 'cwTeXQKai';
    }
    if (/cwfangsong/i.exec(it)) {
      return 'cwTeXQFangsong';
    }
    if (/srcx/i.exec(it)) {
      return 'SourceHanSansTCExtraLight';
    }
    if (/srcl/i.exec(it)) {
      return 'SourceHanSansTCLight';
    }
    if (/srcn/i.exec(it)) {
      return 'SourceHanSansTCNormal';
    }
    if (/srcr/i.exec(it)) {
      return 'SourceHanSansTCRegular';
    }
    if (/srcm/i.exec(it)) {
      return 'SourceHanSansTCMedium';
    }
    if (/srcb/i.exec(it)) {
      return 'SourceHanSansTCBold';
    }
    if (/srch/i.exec(it)) {
      return 'SourceHanSansTCHeavy';
    }
    if (/shsx/i.exec(it)) {
      return 'SourceHanSerifTCExtraLight';
    }
    if (/shsl/i.exec(it)) {
      return 'SourceHanSerifTCLight';
    }
    if (/shsm/i.exec(it)) {
      return 'SourceHanSerifTCMedium';
    }
    if (/shsr/i.exec(it)) {
      return 'SourceHanSerifTCRegular';
    }
    if (/shss/i.exec(it)) {
      return 'SourceHanSerifTCSemiBold';
    }
    if (/shsb/i.exec(it)) {
      return 'SourceHanSerifTCBold';
    }
    if (/shsh/i.exec(it)) {
      return 'SourceHanSerifTCHeavy';
    }
    if (/gwmel/i.exec(it)) {
      return 'GenWanMin TW EL';
    }
    if (/gwml/i.exec(it)) {
      return 'GenWanMin TW L';
    }
    if (/gwmr/i.exec(it)) {
      return 'GenWanMin TW R';
    }
    if (/gwmm/i.exec(it)) {
      return 'GenWanMin TW M';
    }
    if (/gwmsb/i.exec(it)) {
      return 'GenWanMin TW SB';
    }
    if (/rxkt/i.exec(it)) {
      return 'Typography';
    }
    if (/openhuninn/i.exec(it)) {
      return 'jf-openhuninn-1.1';
    }
    return wt2font[it] || 'TW-Kai';
  };
  iconv = require('iconv-lite');
  fixMojibake = function(it){
    if (!/^[\u0080-\u00FF]/.test(it)) {
      return it;
    }
    return iconv.decode(iconv.encode(it, 'latin1'), 'utf8');
  };
  fs.mkdir('png', function(){
    require('zappajs')({
      disable_io: true,
      port: process.env.ZAPPA_PORT || 3000
    }, function(){
      this.get({
        '/:text.png': function(){
          var font;
          this.params.text = fixMojibake(this.params.text);
          this.response.type('image/png');
          font = fontOf(this.query.font);
          return text2png(this.params.text.replace(/^['!~:]/, ''), font).pipe(this.response);
        }
      });
      this.get({
        '/': function(){
          this.response.type('text/html');
          return this.response.sendfile('index.html');
        }
      });
      this.get({
        '/index.html': function(){
          this.response.type('text/html');
          return this.response.sendfile('index.html');
        }
      });
      this.get({
        '/styles.css': function(){
          this.response.type('text/css');
          return this.response.sendfile('styles.css');
        }
      });
      this.get({
        '/cordova.js': function(){
          this.response.type('application/json');
          return this.response.send('');
        }
      });
      this.get({
        '/css/:path/:file.css': function(){
          this.response.type('text/css');
          return this.response.sendfile("css/" + this.params.path + "/" + this.params.file + ".css");
        }
      });
      this.get({
        '/styles.css': function(){
          this.response.type('text/css');
          return this.response.sendfile('styles.css');
        }
      });
      this.get({
        '/favicon.ico': function(){
          this.response.type('image/vnd.microsoft.icon');
          return this.response.sendfile('favicon.ico');
        }
      });
      this.get({
        '/manifest.appcache': function(){
          this.response.type('text/cache-manifest');
          return this.response.sendfile('manifest.appcache');
        }
      });
      this.get({
        '/images/:file.png': function(){
          this.response.type('image/png');
          return this.response.sendfile("images/" + this.params.file + ".png");
        }
      });
      this.get({
        '/images/:file.jpg': function(){
          this.response.type('image/jpeg');
          return this.response.sendfile("images/" + this.params.file + ".jpg");
        }
      });
      this.get({
        '/:path/:file.json': function(){
          this.response.type('application/json');
          return this.response.sendfile(this.params.path + "/" + this.params.file + ".json");
        }
      });
      this.get({
        '/js/:path/:file.js': function(){
          this.response.type('application/javascript');
          return this.response.sendfile("js/" + this.params.path + "/" + this.params.file + ".js");
        }
      });
      this.get({
        '/js/:file.js': function(){
          this.response.type('application/javascript');
          return this.response.sendfile("js/" + this.params.file + ".js");
        }
      });
      this.get({
        '/:file.js': function(){
          this.response.type('application/javascript');
          return this.response.sendfile(this.params.file + ".js");
        }
      });
      this.get({
        '/fonts/:file.ttf': function(){
          this.response.type('application/x-font-ttf');
          return this.response.sendfile("fonts/" + this.params.file + ".ttf");
        }
      });
      this.get({
        '/fonts/:file.woff': function(){
          this.response.type('application/x-font-woff');
          return this.response.sendfile("fonts/" + this.params.file + ".woff");
        }
      });
      this.get({
        '/:text/:idx': function(){
          var text, val, lang, this$ = this;
          this.params.text = fixMojibake(this.params.text);
          this.response.type('text/html');
          text = val = replace$.call(this.params.text, /.html$/, '');
          lang = 'a';
          if (/^['!]/.exec(val + "")) {
            lang = 't';
            val = val.substr(1);
          }
          if (/^:/.exec(val + "")) {
            lang = 'h';
            val = val.substr(1);
          }
          if (/^~/.exec(val + "")) {
            lang = 'c';
            val = val.substr(1);
          }
          return fs.readFile(lang + "/" + val + ".json", function(err, json){
            var payload;
            payload = err
              ? {}
              : (function(){
                try {
                  return JSON.parse(json);
                } catch (e$) {}
              }());
            payload = import$({
              layout: 'layout',
              text: text,
              isBot: true,
              isCLI: true,
              pngSuffix: '.png',
              wt2font: wt2font,
              font2name: font2name,
              isWord: false,
              idx: this$.params.idx
            }, payload);
            return this$.render({
              index: payload
            });
          });
        }
      });
      this.get({
        '/:text.json': function(){
          var val, lang, this$ = this;
          this.params.text = fixMojibake(this.params.text);
          this.response.type('application/json');
          val = this.params.text;
          lang = 'a';
          if (/^['!]/.exec(val + "")) {
            lang = 't';
            val = val.substr(1);
          }
          if (/^:/.exec(val + "")) {
            lang = 'h';
            val = val.substr(1);
          }
          if (/^~/.exec(val + "")) {
            lang = 'c';
            val = val.substr(1);
          }
          return fs.readFile(lang + "/" + val + ".json", function(err, json){
            var chunk, i$, ref$, ref1$, len$, re, terms, res$, part, props, l, words;
            if (err) {
              chunk = replace$.call(val, /[`~]/g, '');
              for (i$ = 0, len$ = (ref$ = (ref1$ = LTMRegexes[lang]) != null
                ? ref1$
                : []).length; i$ < len$; ++i$) {
                re = ref$[i$];
                chunk = chunk.replace(re, fn$);
              }
              res$ = [];
              for (i$ = 0, len$ = (ref$ = unescape(chunk).split(/[`~]+/)).length; i$ < len$; ++i$) {
                part = ref$[i$];
                if (part.length) {
                  res$.push(part);
                }
              }
              terms = res$;
              if (err) {
                return this$.response.json(404, {
                  terms: terms
                });
              }
            }
            props = JSON.parse(decodeLangPart(lang, (json || '{}').toString()));
            res$ = [];
            for (l in ref$ = xrefOf(val, lang)) {
              words = ref$[l];
              if (words.length) {
                res$.push({
                  lang: l,
                  words: words
                });
              }
            }
            props.xrefs = res$;
            return this$.response.json(props);
            function fn$(it){
              return escape("`" + it + "~");
            }
          });
        }
      });
      this.get({
        '/:text': function(){
          var text, val, font, pngSuffix, lang, this$ = this;
          if (/^[~:!]?=\*/.exec(this.params.text)) {
            return this.response.redirect("#" + this.params.text);
          }
          this.response.type('text/html');
          text = val = replace$.call(this.params.text, /.html$/, '');
          font = fontOf(this.query.font);
          pngSuffix = '.png';
          if (this.query.font) {
            pngSuffix += "?font=" + this.query.font;
          }
          lang = 'a';
          if (/^['!]/.exec(val + "")) {
            lang = 't';
            val = val.substr(1);
          }
          if (/^:/.exec(val + "")) {
            lang = 'h';
            val = val.substr(1);
          }
          if (/^~/.exec(val + "")) {
            lang = 'c';
            val = val.substr(1);
          }
          return fs.readFile(lang + "/" + val + ".json", function(err, json){
            var isWord, isBot, payload, chars, pngFile, png, pngStream;
            isWord = !err;
            if (this$.query.font) {
              err = true;
            }
            if (val === '=*') {
              err = false;
            }
            isBot = this$.query.bot || /\b(?:Google|Twitterbot)\b/.exec(this$.request.headers['user-agent']);
            payload = err
              ? {}
              : (function(){
                try {
                  return JSON.parse(json);
                } catch (e$) {}
              }());
            if (payload instanceof Array) {
              payload = null;
            }
            payload == null && (payload = {
              t: val
            });
            payload = import$({
              layout: 'layout',
              text: text,
              isBot: isBot,
              isCLI: false,
              pngSuffix: pngSuffix,
              wt2font: wt2font,
              font2name: font2name,
              isWord: isWord
            }, payload);
            chars = text.replace(/^['!~:]/, '');
            chars = chars.slice(0, 50);
            pngFile = "png/" + chars + "." + font + ".png";
            if (fs.existsSync(pngFile)) {
              png = fs.createReadStream('/dev/null');
              pngStream = fs.createWriteStream('/dev/null');
            } else {
              png = text2png(chars, font);
              pngStream = fs.createWriteStream(pngFile);
            }
            return png.pipe(pngStream).on('close', function(){
              var chunk, i$, ref$, ref1$, len$, re, parts, res$, part, segments, iter, xrefs, l, words;
              if (err) {
                chunk = replace$.call(val, /[`~]/g, '');
                for (i$ = 0, len$ = (ref$ = (ref1$ = LTMRegexes[lang]) != null
                  ? ref1$
                  : []).length; i$ < len$; ++i$) {
                  re = ref$[i$];
                  chunk = chunk.replace(re, fn$);
                }
                res$ = [];
                for (i$ = 0, len$ = (ref$ = unescape(chunk).split(/[`~]+/)).length; i$ < len$; ++i$) {
                  part = ref$[i$];
                  if (part.length) {
                    res$.push(part);
                  }
                }
                parts = res$;
                segments = [];
                return (iter = function(){
                  var part;
                  if (parts.length) {
                    part = parts.pop();
                    return defOf(lang, part, function(def){
                      var href;
                      if (def) {
                        href = "https://www.moedict.tw/" + HASHOF[lang] + part;
                      }
                      if (/^[9９][7７][2２]$/.exec(part)) {
                        href = "http://ly.g0v.tw/bills/1150L15359";
                        def = '擬具「民法親屬編、繼承編部分條文修正草案」，請審議案。';
                      } else if (/^[1１][3３][3３]$/.exec(part)) {
                        href = "http://law.moj.gov.tw/LawClass/LawSingle.aspx?Pcode=A0000001&FLNO=133";
                        def = '被選舉人得由原選舉區依法罷免之。';
                      }
                      segments.unshift({
                        def: def,
                        part: part,
                        href: href
                      });
                      return iter();
                    });
                  } else {
                    return this$.render({
                      index: (payload.segments = segments, payload)
                    });
                  }
                })();
              } else {
                res$ = [];
                for (l in ref$ = xrefOf(val, lang)) {
                  words = ref$[l];
                  if (words.length) {
                    res$.push({
                      lang: l,
                      words: words
                    });
                  }
                }
                xrefs = res$;
                return this$.render({
                  index: (payload.indexBody = indexBody, payload.React = React, payload.Result = Result, payload.decodeLangPart = decodeLangPart, payload.json = json, payload.xrefs = xrefs, payload)
                });
              }
              function fn$(it){
                return escape("`" + it + "~");
              }
            });
          });
        }
      });
      return this.view({
        index: function(){
          var expandDef, trim, def, i$, ref$, len$, d, j$, len1$, ref1$, f, l, pngSuffix, suffix, ogImage, TITLEOF, SYMOF, LANG, attrs;
          expandDef = function(def){
            return def.replace(/^\s*<(\d)>\s*([介代副助動名歎嘆形連]?)/, function(_, num, char){
              return String.fromCharCode(0x327F + parseInt(num)) + "" + (char ? char + "\u20DE" : '');
            }).replace(/<(\d)>/g, function(_, num){
              return String.fromCharCode(0x327F + parseInt(num));
            }).replace(/\{(\d)\}/g, function(_, num){
              return String.fromCharCode(0x2775 + parseInt(num));
            }).replace(/[（(](\d)[)）]/g, function(_, num){
              return String.fromCharCode(0x2789 + parseInt(num));
            }).replace(/\(/g, '（').replace(/\)/g, '）');
          };
          trim = function(it){
            return (it != null ? it : '').replace(/[`~]/g, '');
          };
          def = '';
          for (i$ = 0, len$ = (ref$ = this.h || {
            d: [{
              f: this.t
            }]
          }).length; i$ < len$; ++i$) {
            d = ref$[i$].d;
            for (j$ = 0, len1$ = d.length; j$ < len1$; ++j$) {
              ref1$ = d[j$], f = ref1$.f, l = ref1$.l;
              def += f || l;
            }
          }
          def = expandDef(trim(def || (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = this.segments || []).length; i$ < len$; ++i$) {
              def = ref$[i$].def;
              results$.push(def);
            }
            return results$;
          }.call(this)).join('') || this.text + '。'));
          doctype(5);
          pngSuffix = this.pngSuffix;
          suffix = pngSuffix.slice(4);
          if (suffix === '?font=kai' && !this.isWord) {
            suffix = '';
          }
          pngSuffix = pngSuffix.replace(/\?font=kai$/, '');
          ogImage = "https://www.moedict.tw/" + encodeURIComponent(this.text.replace(/^['!~:]/, '')) + pngSuffix;
          TITLEOF = {
            a: '',
            t: '台語',
            h: '客語',
            c: '兩岸'
          };
          SYMOF = {
            '!': 't',
            ':': 'h',
            '~': 'c',
            "'": 't'
          };
          LANG = 'a';
          if (/^['!~:]/.exec(this.text)) {
            LANG = SYMOF[this.text.slice(0, 1)];
          }
          attrs = {
            prefix: "og: http://ogp.me/ns#",
            lang: 'zh-Hant',
            'xml:lang': 'zh-Hant'
          };
          if (!(this.segments || this.idx)) {
            attrs.manifest = 'manifest.appcache';
          }
          return html(attrs, function(){
            return head(function(){
              var ref$, len, ref1$, w, t, Title, esc, word, h, id, fillProps, props, str, html, this$ = this;
              meta({
                charset: 'utf-8'
              });
              if ((ref$ = this.segments) != null && ref$.length) {
                meta({
                  name: 'robots',
                  content: 'noindex'
                });
              }
              meta({
                name: "twitter:card",
                content: "summary"
              });
              meta({
                name: "twitter:site",
                content: "@moedict"
              });
              meta({
                name: "twitter:creator",
                content: "@audreyt"
              });
              meta({
                property: "og:url",
                content: "https://www.moedict.tw/" + encodeURIComponent(this.text) + suffix
              });
              meta({
                property: "og:image",
                content: ogImage
              });
              meta({
                property: "og:image:type",
                content: "image/png"
              });
              meta({
                name: 'viewport',
                content: 'user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1'
              });
              len = (ref1$ = this.text.length) < 50 ? ref1$ : 50;
              w = len;
              if (w > 4) {
                w = Math.ceil(len / Math.sqrt(len * 0.5));
              }
              meta({
                property: "og:image:width",
                content: w * 375 + ""
              });
              meta({
                property: "og:image:height",
                content: w * 375 + ""
              });
              t = trim(this.t);
              if (this.english) {
                t += " (" + this.english + ")";
              }
              t || (t = this.text);
              if (/^['!~:]/.exec(t)) {
                t = t.slice(1);
              }
              Title = t + " - " + TITLEOF[LANG] + "萌典";
              esc = function(it){
                return it.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, "&apos;").replace(/"/g, "&quot;");
              };
              title(esc(Title));
              meta({
                name: "og:title",
                content: esc(Title)
              });
              meta({
                name: "twitter:title",
                content: esc(Title)
              });
              meta({
                property: "og:description",
                content: esc(def)
              });
              meta({
                name: "description",
                content: esc(def)
              });
              link({
                href: '/styles.css',
                rel: 'stylesheet'
              });
              link({
                href: '/css/cupertino/jquery-ui-1.10.4.custom.css',
                rel: 'stylesheet'
              });
              if (this.segments) {
                base({
                  target: '_blank'
                });
              }
              word = this.text.replace(/^['!~:]/, '').replace(/["\n]/g, '');
              if (!this.segments) {
                h = '';
                if (/^['!~:]/.exec(this.text)) {
                  h = this.text.slice(0, 1);
                }
                if (h === '!') {
                  h = '\'';
                }
                id = trim(this.t);
                if (this.idx) {
                  return body({
                    itemscope: true,
                    itemtype: 'http://schema.org/ScholarlyArticle'
                  }, function(){
                    var idx;
                    idx = 0;
                    (this.isCLI
                      ? function(it){
                        return div({
                          'class': 'result'
                        }, it);
                      }
                      : function(it){
                        return div({
                          id: 'result',
                          'class': 'hide'
                        }, it);
                      })(function(){
                      meta({
                        itemprop: "image",
                        content: esc(ogImage)
                      });
                      h1({
                        itemprop: 'name'
                      }, "<a href='/" + h + esc(word) + "'>" + esc(word) + "</a>");
                      return div({
                        itemprop: 'articleBody'
                      }, function(){
                        var i$, ref$, len$, ref1$, d, t, b, T, P, results$ = [];
                        for (i$ = 0, len$ = (ref$ = this.h || {
                          d: [{
                            f: this.t
                          }]
                        }).length; i$ < len$; ++i$) {
                          ref1$ = ref$[i$], d = ref1$.d, t = ref1$.t, b = ref1$.b, T = ref1$.T, P = ref1$.p;
                          p(trim(b || t || T || (P + "").replace(/\u20DE/g, ' ')));
                          results$.push(ol(fn$));
                        }
                        return results$;
                        function fn$(){
                          var i$, ref$, len$, ref1$, f, ref2$, l, s, e, q, a, results$ = [];
                          for (i$ = 0, len$ = (ref$ = d).length; i$ < len$; ++i$) {
                            ref1$ = ref$[i$], f = (ref2$ = ref1$.f) != null ? ref2$ : '', l = (ref2$ = ref1$.l) != null ? ref2$ : '', s = (ref2$ = ref1$.s) != null ? ref2$ : '', e = (ref2$ = ref1$.e) != null ? ref2$ : '', l = (ref2$ = ref1$.l) != null ? ref2$ : '', q = (ref2$ = ref1$.q) != null
                              ? ref2$
                              : [], a = (ref2$ = ref1$.a) != null ? ref2$ : '';
                            results$.push(li(fn$));
                          }
                          return results$;
                          function fn$(){
                            var s, a;
                            s = s ? "<br>似:[" + s + "]" : '';
                            a = a ? "<br>反:[" + a + "]" : '';
                            return dl(function(){
                              dt(function(){
                                return h3({
                                  'class': (++idx === +this.idx ? 'alert alert-success' : '') + ""
                                }, (expandDef(f) + "" + l).replace(/`([^~]+)~/g, function(arg$, word){
                                  return "<a href='/" + h + word + "'>" + word + "</a>";
                                }));
                              });
                              return dd(function(){
                                return (q.join('<br>') + "" + s + a).replace(/`([^~]+)~/g, function(arg$, word){
                                  return "<a href='/" + h + word + "'>" + word + "</a>";
                                });
                              });
                            });
                          }
                        }
                      });
                    });
                    if (!this.isCLI) {
                      return script("if (/MSIE\\s+[678]/.exec(navigator.userAgent)) { document.getElementById('result').setAttribute('class', 'result') } else { location.hash = \"#" + h + word + "\" }");
                    }
                  });
                }
                fillProps = function(){
                  props.id = id;
                  props.xrefs = this$.xrefs;
                  props.LANG = LANG;
                  props.H = h;
                  return props.type = 'term';
                };
                props = {};
                str = (this.json || '').toString();
                if (/^\[\s*\[/.exec(str)) {
                  props = {
                    id: id,
                    type: 'radical',
                    terms: str,
                    H: h
                  };
                } else if (/^\[/.exec(str)) {
                  props = {
                    id: id,
                    type: 'list',
                    terms: str,
                    H: h
                  };
                } else {
                  props = JSON.parse(this.decodeLangPart(h, str));
                  fillProps();
                }
                text("<script>window.PRERENDER_LANG = '" + LANG + "'; window.PRERENDER_ID = '" + id + "';</script>");
                html = this.indexBody;
                html = html.replace('<!-- RESULT -->', this.React.renderToString(this.Result(props)));
                text(html.replace(/&nbsp;/g, '\u00A0'));
                props.H = h;
                text("<!--[if gt IE 8]><!--><script>$(function(){\n  window.PRERENDER_JSON = " + JSON.stringify(props, void 8, 2) + ";\n  React.View.result = React.render(React.View.Result(\n    window.PRERENDER_JSON\n  ), $('#result')[0], window.bindHtmlActions);\n})</script><!--<![endif]-->");
                return;
              }
              return body({
                itemscope: true,
                itemtype: 'http://schema.org/ItemList'
              }, function(){
                return center(function(){
                  var attrs, uri;
                  meta({
                    itemprop: "name",
                    content: esc(word)
                  });
                  meta({
                    itemprop: "image",
                    content: ogImage
                  });
                  meta({
                    itemprop: "itemListOrder",
                    content: 'Unordered'
                  });
                  attrs = {
                    'class': 'moedict',
                    src: word + "" + pngSuffix,
                    width: 240,
                    height: 240,
                    alt: word,
                    title: word
                  };
                  if (word.length > 1) {
                    attrs.style = 'margin-top: -50px; margin-bottom: -50px;';
                    attrs.width = 320;
                    attrs.height = 320;
                  }
                  img(attrs);
                  uri = encodeURIComponent(encodeURIComponent(this.text));
                  uri += suffix;
                  div({
                    'class': 'share',
                    style: 'margin: 15px'
                  }, function(){
                    a({
                      'class': 'share-f btn btn-default',
                      title: 'Facebook 分享',
                      style: 'margin-right: 10px; background: #3B579D; color: white',
                      'href': "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.moedict.tw%2F" + uri
                    }, function(){
                      i({
                        'class': 'icon-share'
                      });
                      span(' ');
                      return i({
                        'class': 'icon-facebook'
                      }, ' 臉書');
                    });
                    return a({
                      'class': 'share-t btn btn-default',
                      title: 'Twitter 分享',
                      style: 'background: #00ACED; color: white',
                      'href': "https://twitter.com/share?url=https%3A%2F%2Fwww.moedict.tw%2F" + uri + "&text=" + encodeURIComponent(this.text.replace(/^['!~:]/, ''))
                    }, function(){
                      i({
                        'class': 'icon-share'
                      });
                      span(' ');
                      return i({
                        'class': 'icon-twitter'
                      }, ' 推特');
                    });
                  });
                  table({
                    'class': 'moetext',
                    style: 'max-width: 90%;\nbackground: #eee;\nborder: 24px #f9f9f9 solid !important;\nbox-shadow: #d4d4d4 0 3px 3px;'
                  }, function(){
                    var i$, ref$, len$, ref1$, href, part, def, results$ = [];
                    for (i$ = 0, len$ = (ref$ = this.segments || []).length; i$ < len$; ++i$) {
                      ref1$ = ref$[i$], href = ref1$.href, part = ref1$.part, def = ref1$.def;
                      results$.push(tr(fn$));
                    }
                    return results$;
                    function fn$(){
                      td(function(){
                        meta({
                          itemprop: "itemListElement",
                          content: esc(part)
                        });
                        return a({
                          href: href
                        }, function(){
                          return img({
                            style: 'vertical-align: top;\nbackground: white;\nborder-radius: 10px;\nboder: 1px solid #999;\nbox-shadow: #d4d4d4 0 3px 3px;\nmargin: 10px;',
                            'class': 'btn btn-default',
                            src: esc(part + "" + pngSuffix),
                            width: 160,
                            height: 160,
                            alt: esc(part),
                            title: esc(part)
                          });
                        });
                      });
                      return td(function(){
                        return a({
                          style: 'color: #006',
                          href: href
                        }, expandDef(def));
                      });
                    }
                  });
                  return form({
                    id: 'frm',
                    style: 'top: 0;\nright: 0;\nbackground: rgba(200, 200, 200, 0.5);\nborder-radius: 5px;\npadding: 5px 15px;\nposition: absolute;'
                  }, function(){
                    select({
                      id: 'lang',
                      name: 'lang',
                      onchange: "document.getElementById('submit').click()"
                    }, function(){
                      option({
                        value: ''
                      }, '臺灣華語');
                      option({
                        selected: /^['!]/.exec(this.text),
                        value: '\''
                      }, '臺灣台語');
                      return option({
                        selected: /^:/.exec(this.text),
                        value: ':'
                      }, '臺灣客語');
                    });
                    select({
                      id: 'font',
                      name: 'font',
                      onchange: "document.getElementById('submit').click()"
                    }, function(){
                      optgroup({
                        label: '全字庫'
                      }, function(){
                        option({
                          value: '?font=kai'
                        }, '楷書');
                        option({
                          selected: pngSuffix === '.png?font=sung',
                          value: '?font=sung'
                        }, '宋體');
                        return option({
                          selected: pngSuffix === '.png?font=ebas',
                          value: '?font=ebas'
                        }, '篆文');
                      });
                      optgroup({
                        label: '源雲明體'
                      }, function(){
                        option({
                          selected: pngSuffix === '.png?font=gwmel',
                          value: '?font=gwmel'
                        }, '特細');
                        option({
                          selected: pngSuffix === '.png?font=gwml',
                          value: '?font=gwml'
                        }, '細體');
                        option({
                          selected: pngSuffix === '.png?font=gwmr',
                          value: '?font=gwmr'
                        }, '標準');
                        option({
                          selected: pngSuffix === '.png?font=gwmm',
                          value: '?font=gwmm'
                        }, '正明');
                        return option({
                          selected: pngSuffix === '.png?font=gwmsb',
                          value: '?font=gwmsb'
                        }, '中明');
                      });
                      optgroup({
                        label: 'Justfont'
                      }, function(){
                        return option({
                          selected: pngSuffix === '.png?font=openhuninn',
                          value: '?font=openhuninn'
                        }, 'Open 粉圓');
                      });
                      optgroup({
                        label: '逢甲大學'
                      }, function(){
                        return option({
                          selected: pngSuffix === '.png?font=shuowen',
                          value: '?font=shuowen'
                        }, '說文標篆');
                      });
                      optgroup({
                        label: 'cwTeX Q',
                        style: 'font-family: Helvetica, sans-serif'
                      }, function(){
                        option({
                          selected: pngSuffix === '.png?font=cwming',
                          value: '?font=cwming'
                        }, '明體');
                        option({
                          selected: pngSuffix === '.png?font=cwhei',
                          value: '?font=cwhei'
                        }, '黑體');
                        option({
                          selected: pngSuffix === '.png?font=cwyuan',
                          value: '?font=cwyuan'
                        }, '圓體');
                        option({
                          selected: pngSuffix === '.png?font=cwkai',
                          value: '?font=cwkai'
                        }, '楷書');
                        return option({
                          selected: pngSuffix === '.png?font=cwfangsong',
                          value: '?font=cwfangsong'
                        }, '仿宋');
                      });
                      optgroup({
                        label: '思源宋體'
                      }, function(){
                        option({
                          selected: pngSuffix === '.png?font=shsx',
                          value: '?font=shsx'
                        }, '特細');
                        option({
                          selected: pngSuffix === '.png?font=shsl',
                          value: '?font=shsl'
                        }, '細體');
                        option({
                          selected: pngSuffix === '.png?font=shsr',
                          value: '?font=shsr'
                        }, '標準');
                        option({
                          selected: pngSuffix === '.png?font=shsm',
                          value: '?font=shsm'
                        }, '正宋');
                        option({
                          selected: pngSuffix === '.png?font=shss',
                          value: '?font=shss'
                        }, '中宋');
                        option({
                          selected: pngSuffix === '.png?font=shsb',
                          value: '?font=shsb'
                        }, '粗體');
                        return option({
                          selected: pngSuffix === '.png?font=shsh',
                          value: '?font=shsh'
                        }, '特粗');
                      });
                      optgroup({
                        label: '思源黑體'
                      }, function(){
                        option({
                          selected: pngSuffix === '.png?font=srcx',
                          value: '?font=srcx'
                        }, '特細');
                        option({
                          selected: pngSuffix === '.png?font=srcl',
                          value: '?font=srcl'
                        }, '細體');
                        option({
                          selected: pngSuffix === '.png?font=srcn',
                          value: '?font=srcn'
                        }, '標準');
                        option({
                          selected: pngSuffix === '.png?font=srcr',
                          value: '?font=srcr'
                        }, '正黑');
                        option({
                          selected: pngSuffix === '.png?font=srcm',
                          value: '?font=srcm'
                        }, '中黑');
                        option({
                          selected: pngSuffix === '.png?font=srcb',
                          value: '?font=srcb'
                        }, '粗體');
                        return option({
                          selected: pngSuffix === '.png?font=srch',
                          value: '?font=srch'
                        }, '特粗');
                      });
                      return optgroup({
                        label: '王漢宗'
                      }, function(){
                        var wt, ref$, font, results$ = [];
                        for (wt in ref$ = this.wt2font) {
                          font = ref$[wt];
                          results$.push(option({
                            selected: pngSuffix === ".png?font=" + wt,
                            value: "?font=" + wt
                          }, this.font2name[font]));
                        }
                        return results$;
                      });
                    });
                    input({
                      id: 'in',
                      name: 'in',
                      'class': 'form-control',
                      style: 'width: auto; display: inline; width: 150px',
                      autofocus: true,
                      size: 10,
                      onfocus: 'this.select()',
                      value: word
                    });
                    return button({
                      id: 'submit',
                      type: 'submit',
                      'class': 'btn btn-default',
                      onclick: "var x; if (x = document.getElementById('in').value) {location.href = document.getElementById('lang').value + encodeURIComponent(x.replace(/ /g, '\u3000').replace(/[\u0020-\u007E]/g, function(it){ return String.fromCharCode(it.charCodeAt(0) + 0xFEE0); })) + document.getElementById('font').value }; return false"
                    }, function(){
                      return i({
                        'class': 'icon-pencil'
                      });
                    });
                  });
                });
              });
            });
          });
        }
      });
    });
    function text2dim(len){
      var w, h, ref$;
      len <= 50 || (len = 50);
      w = len;
      if (w > 4) {
        w = Math.ceil(len / Math.sqrt(len * 0.5));
      }
      h = (ref$ = Math.ceil(len / w)) < w ? ref$ : w;
      return [w, h];
    }
    function text2png(text, font){
      var pngFile, ref$, w, h, padding, Canvas, canvas, margin, ctx, row, idx, ch, offset, x, y;
      text = text.slice(0, 50);
      pngFile = "png/" + text + "." + font + ".png";
      if (fs.existsSync(pngFile)) {
        return fs.createReadStream(pngFile);
      }
      ref$ = text2dim((replace$.call(text, /[\uDC00-\uDFFF]/g, '')).length), w = ref$[0], h = ref$[1];
      padding = (w - h) / 2;
      Canvas = require('canvas');
      canvas = new Canvas(w * 375, w * 375);
      margin = (w * 15) / 2;
      ctx = canvas.getContext('2d');
      row = 1;
      while (text.length) {
        idx = 0;
        while (idx < w && text.length) {
          ch = text.slice(0, 1);
          text = text.slice(1);
          ctx.font = "355px " + font;
          if (/SourceHanSerifTCRegular/.exec(font)) {
            ctx.font = '355px "Source Han Serif TC"';
          }
          if (/SourceHanSerifTCBold/.exec(font)) {
            ctx.font = 'bold 355px "Source Han Serif TC"';
          }
          if (/[\u3000\uFF01-\uFF5E]/.exec(ch) && /EBAS|ShuoWen/.exec(font)) {
            ctx.font = "355px TW-Kai";
          }
          while (text.length && /[\uDC00-\uDFFF]/.exec(text[0])) {
            ctx.font = "355px " + font + ", SourceHanSansTCRegular, SourceHanSansTCRegular, TWBLG, HanaMinA, HanaMinB, Apple Color Emoji";
            ch += text[0];
            ch += text[1];
            text = text.slice(2);
          }
          while (text.length && /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/.exec(text[0])) {
            ctx.font = "355px Arial Unicode MS, " + font;
            ch += text[0];
            text = text.slice(1);
          }
          drawBackground(ctx, margin + idx * 360, 10 + (padding + row - 1) * 375, 355);
          offset = /[\u3000\uFF01-\uFF5E]/.exec(ch) ? 0.17 : 0.23;
          x = margin + idx * 360;
          y = (padding + row - offset) * 375;
          if (/[0-9a-zA-Z]/.exec(ch)) {
            x += 90;
          }
          if (/ShuoWen/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            x += 50;
            y += 45;
          }
          if (/Typography/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            x += 25;
            y += 5;
          }
          if (/jf-openhuninn-1.1/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            y += 20;
          }
          if (/cwTeXQ/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            x += 15;
            y += 15;
          }
          if (/SourceHanSerif/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            y += 30;
          }
          if (/SourceHanSans/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            y += 30;
          }
          if (/GenWanMin/.exec(font) && !/[\u3000\uFF01-\uFF5E]/.test(ch)) {
            y += 30;
          }
          ctx.fillText(ch, x, y);
          idx++;
        }
        row++;
      }
      return canvas.pngStream();
    }
    function drawBackground(ctx, x, y, dim){
      ctx.strokeStyle = '#A33';
      ctx.fillStyle = '#F9F6F6';
      ctx.beginPath();
      ctx.lineWidth = 8;
      ctx.moveTo(x, y);
      ctx.lineTo(x, y + dim);
      ctx.lineTo(x + dim, y + dim);
      ctx.lineTo(x + dim, y);
      ctx.lineTo(x - ctx.lineWidth / 2, y);
      ctx.stroke();
      ctx.fill();
      ctx.fillStyle = '#000';
      ctx.beginPath();
      ctx.lineWidth = 2;
      ctx.moveTo(x, y + dim / 3);
      ctx.lineTo(x + dim, y + dim / 3);
      ctx.moveTo(x, y + dim / 3 * 2);
      ctx.lineTo(x + dim, y + dim / 3 * 2);
      ctx.moveTo(x + dim / 3, y);
      ctx.lineTo(x + dim / 3, y + dim);
      ctx.moveTo(x + dim / 3 * 2, y);
      ctx.lineTo(x + dim / 3 * 2, y + dim);
      return ctx.stroke();
    }
    return drawBackground;
  });
  function fn$(lang){
    var json, lenToRegex, lens, len, res$, i$, len$;
    json = fs.readFileSync(lang + "/xref.json");
    XREF[lang] = JSON.parse(json);
    json = fs.readFileSync(lang + "/lenToRegex.json");
    try {
      lenToRegex = JSON.parse(json).lenToRegex;
      lens = [];
      for (len in lenToRegex) {
        lens.push(len);
        lenToRegex[len] = new RegExp(lenToRegex[len], 'g');
      }
      lens.sort(function(a, b){
        return b - a;
      });
      res$ = [];
      for (i$ = 0, len$ = lens.length; i$ < len$; ++i$) {
        len = lens[i$];
        res$.push(lenToRegex[len]);
      }
      LTMRegexes[lang] = res$;
    } catch (e$) {}
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
